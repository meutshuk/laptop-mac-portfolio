import {
  Text,
  Html,
  ContactShadows,
  PresentationControls,
  Float,
  Environment,
  OrbitControls,
  useGLTF,
  ScrollControls,
  useScroll,
  Center,
} from "@react-three/drei";
import * as THREE from "three";
import { useSpring } from "@react-spring/core";
import { a as three } from "@react-spring/three";
import { a as web } from "@react-spring/web";
import { useRef, useState, forwardRef, useEffect } from "react";
import { Canvas, useFrame, useThree } from "@react-three/fiber";
import useRefs from "react-use-refs";

const rsqw = (t, delta = 0.1, a = 1, f = 1 / (2 * Math.PI)) =>
  (a / Math.atan(1 / delta)) * Math.atan(Math.sin(2 * Math.PI * t * f) / delta);

function Composition() {
  const scroll = useScroll();
  const { width, height } = useThree((state) => state.viewport);

  //   const [mbp16, text] = useRefs();
  const mbp16 = useRef();

  useFrame((state, delta) => {
    const r1 = scroll.range(0 / 4, 1 / 4);
    const r2 = scroll.range(1 / 4, 1 / 4);
    const r3 = scroll.visible(4 / 5, 1 / 5);

    mbp16.current.rotation.x = Math.PI - (Math.PI / 2) * rsqw(r1);
  });

  return (
    <>
      <Text
        font="./HaloHandletter.otf"
        rotation={[0, -0.62, 0]}
        scale={1.3}
        position={[2, 0, -2.5]}
      >
        hello.
      </Text>
      <Macbook
        ref={mbp16}
        rotation={[0, -0.62, 0]}
        scale={0.1}
        position-x={0}
        position-y={-0.4}
      />
    </>
  );
}

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 macbook.glb --transformm 
*/
const Macbook = forwardRef(({ texture, children, ...props }, ref) => {
  const { nodes, materials } = useGLTF("/mbp-v1-pipe.glb");
  return (
    <group {...props} dispose={null}>
      <group
        ref={ref}
        position={[0, -0.43, -11.35]}
        rotation={[Math.PI / 2, 0, 0]}
      >
        <mesh
          geometry={nodes.back_1.geometry}
          material={materials.blackmatte}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes.back_2.geometry}
          material={materials.aluminium}
        />
        <mesh geometry={nodes.matte.geometry}>
          <meshLambertMaterial map={texture} toneMapped={false} />
        </mesh>
      </group>
      {children}
      <mesh
        geometry={nodes.body_1.geometry}
        material={materials.aluminium}
        material-color="#aaaaaf"
        material-envMapIntensity={0.2}
      />
      <mesh geometry={nodes.body_2.geometry} material={materials.blackmatte} />
    </group>
  );
});

export default function Experience() {
  return (
    <>
      <ScrollControls pages={5}>
        <color args={["#6b3b3b"]} attach="background" />
        <Environment preset="sunset" />
        <Composition />
      </ScrollControls>
    </>
  );
}
